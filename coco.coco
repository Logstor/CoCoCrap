


DATA AST                WITH { String translate(Object ... params) }

= Start(List<DataTypeDef> dataTypeDefs)     { 
        StringBuilder sb = new StringBuilder();

        // Header
        sb.append("import java.util.*;\n\n");
        sb.append("abstract class AST{}\n\n");

        // Add all datatype definitions
        for (DataTypeDef def : datatypedefs) { sb.append(def.translate()); }

        return sb.toString(); }

| DataTypeDef(String dataTypeName, String functionHead, List<Alternative> alternatives) {
        StringBuilder sb = new StringBuilder();

        // Class header
        sb.append( String.format("abstract class %s extends AST\n{", dataTypeName) );

        // Function
        if ( functionHead.replace(" ", "").equals("") )
            sb.append( String.format("\n%spublic abstract %s;\n", tab(1), functionHead) );
        sb.append("};\n");

        for (Alternative alt : alternatives) 
        { 
            sb.append("\n");
            sb.append( alt.translate(dataTypeName, functionHead) );
            sb.append("\n");
        }

        return sb.toString(); }

| Alternative(String constructor, List<Argument> arguments,  String code) { return params[2]; }
| Argument(String type, String name) { }
;